// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: port.proto

package port

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	StorePort(ctx context.Context, opts ...grpc.CallOption) (PortService_StorePortClient, error)
	FindPort(ctx context.Context, in *FindPortRequest, opts ...grpc.CallOption) (*SerialisedPort, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) StorePort(ctx context.Context, opts ...grpc.CallOption) (PortService_StorePortClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortService_ServiceDesc.Streams[0], "/port.PortService/StorePort", opts...)
	if err != nil {
		return nil, err
	}
	x := &portServiceStorePortClient{stream}
	return x, nil
}

type PortService_StorePortClient interface {
	Send(*SerialisedPort) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type portServiceStorePortClient struct {
	grpc.ClientStream
}

func (x *portServiceStorePortClient) Send(m *SerialisedPort) error {
	return x.ClientStream.SendMsg(m)
}

func (x *portServiceStorePortClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portServiceClient) FindPort(ctx context.Context, in *FindPortRequest, opts ...grpc.CallOption) (*SerialisedPort, error) {
	out := new(SerialisedPort)
	err := c.cc.Invoke(ctx, "/port.PortService/FindPort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility
type PortServiceServer interface {
	StorePort(PortService_StorePortServer) error
	FindPort(context.Context, *FindPortRequest) (*SerialisedPort, error)
	//mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortServiceServer struct {
}

func (UnimplementedPortServiceServer) StorePort(PortService_StorePortServer) error {
	return status.Errorf(codes.Unimplemented, "method StorePort not implemented")
}
func (UnimplementedPortServiceServer) FindPort(context.Context, *FindPortRequest) (*SerialisedPort, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPort not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_StorePort_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PortServiceServer).StorePort(&portServiceStorePortServer{stream})
}

type PortService_StorePortServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SerialisedPort, error)
	grpc.ServerStream
}

type portServiceStorePortServer struct {
	grpc.ServerStream
}

func (x *portServiceStorePortServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *portServiceStorePortServer) Recv() (*SerialisedPort, error) {
	m := new(SerialisedPort)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PortService_FindPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).FindPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/port.PortService/FindPort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).FindPort(ctx, req.(*FindPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "port.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPort",
			Handler:    _PortService_FindPort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StorePort",
			Handler:       _PortService_StorePort_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "port.proto",
}
